// Implementation file for Unsorted.h#include "unsorted.h"UnsortedType::UnsortedType(){  length = 0;}bool UnsortedType::IsFull() const{  return (length == MAX_ITEMS);}int UnsortedType::LengthIs() const{  return length;}void UnsortedType::RetrieveItem(ItemType& item, bool& found) // Pre:  Key member(s) of item is initialized. // Post: If found, item's key matches an element's key in the //       list and a copy of that element has been stored in item; //       otherwise, item is unchanged. {  bool moreToSearch;  int location = 0;  found = false;  moreToSearch = (location < length);  while (moreToSearch && !found)   {    switch (item.ComparedTo(info[location]))    {      case LESS    :       case GREATER : location++;                     moreToSearch = (location < length);                     break;      case EQUAL   : found = true;                     item = info[location];                     break;    }  }}void UnsortedType::InsertItem(ItemType item)// Post: item is in the list.{  info[length] = item;  length++;}void UnsortedType::DeleteItem(ItemType item)// Pre:  item's key has been initialized.//       An element in the list has a key that matches item's.// Post: No element in the list has a key that matches item's.{  int location = 0;  while (item.ComparedTo(info[location]) != EQUAL)    location++;  info[location] = info[length - 1];  length--;}//lab02-2//function: item을 리스트에서 찾아 삭제한다.//precondition: 리스트는 초기화돼야한다.//				삭제하려는 아이템이 리스트에 없을 수도 있다.//postcondition: 삭제하려는 아이템을 리스트에서 삭제하거나 리스트 내에 없으면 리스트를 변하지 않게 한다.void UnsortedType::DeleteItem_a(ItemType item) {	bool deleted = false;	int location = 0;	for (int i = 0; i < length && !deleted; i++) {		if (item.ComparedTo(info[location]) == EQUAL) { //info안에서 item찾으면 EQUAL			info[location] = info[length - 1]; //제일 뒷 item을 삭제할 자리로			length--; //삭제했으므로 length는 하나 줄어듦			deleted = true; // !deleted가 false->for문 종료		}	}	//deleted가 true로 바뀌지 않고(=삭제될 아이템 없음) for문 종료되면 리스트 변화x}//function: item을 리스트에서 찾아 그 값을 모두 삭제한다.//precondition: 리스트는 초기화돼야한다.//				삭제하려는 아이템이 리스트에 여러 개일 수 있다.//postcondition: 삭제될 요소가 리스트에서 모두 삭제된다.void UnsortedType::DeleteItem_c(ItemType item) {	int i = 0;	while (i < length) {		if (item.ComparedTo(info[i]) == EQUAL) {			info[i] = info[length - 1];			length--;			continue; //현재 i위치의 값이 변경됨->다시 확인해야하니까 i값은 변경 x		}		else			i++;	}}void UnsortedType::ResetList()// Post: currentPos has been initialized.{  currentPos = -1;}void UnsortedType::GetNextItem(ItemType& item)// Post: item is current item.//       Current position has been updated.{  currentPos++;  item = info[currentPos];}